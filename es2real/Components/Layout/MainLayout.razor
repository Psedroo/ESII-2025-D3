@using ES2Real.Data
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider



<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (estaAutenticado)
            {
                <button class="btn btn-lg px-5" @onclick="TerminarSessao">Terminar Sessão</button>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {
    private bool estaAutenticado = false;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        estaAutenticado = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        estaAutenticado = authState.User.Identity?.IsAuthenticated ?? false;

        if (!estaAutenticado)
        {
            Navigation.NavigateTo("/login", true);
        }

        StateHasChanged(); // força a UI a atualizar
    }


    private void TerminarSessao()
    {
        if (AuthStateProvider is CustomAuthStateProvider custom)
        {
            custom.Logout();
        }
    }
}
