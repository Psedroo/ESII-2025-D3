@page "/EventoAtividades/{id:int}"
@using System.Diagnostics.Eventing.Reader
@using System.Net
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@using ES2Real.Components.Layout
@inject HttpClient Http
@inject UserSessionService _userSessionService
@rendermode InteractiveServer

<BackButton />

<h3>Detalhes do Evento</h3>

@if (evento is null)
{
    <p>Carregando...</p>
}
else
{
    <div class="evento-detalhes">
        <h4>@evento.Nome</h4>
        <p><strong>Data:</strong> @evento.Data.ToString("dd/MM/yyyy")</p>
        <p><strong>Hora:</strong> @evento.Hora</p>
        <p><strong>Local:</strong> @evento.Local</p>
        <p><strong>Categoria:</strong> @evento.Categoria</p>
        <p><strong>Descrição:</strong> @evento.Descricao</p>
    </div>

    <h5>Atividades do Evento</h5>
    @if (atividades is null || !atividades.Any())
    {
        <p>Nenhuma atividade associada a este evento.</p>
    }
    else
    {
        <ul class="list-group mb-4">
            @foreach (var atividade in atividades)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@atividade.Nome</strong> - @atividade.Descricao<br />
                        <em>@atividade.Data.ToString("dd/MM/yyyy") às @atividade.Hora</em>
                    </div>
                    <div>
                        @if (cargo == "Organizador")
                        {
                            <button class="btn btn-primary btn-sm me-2" @onclick="() => EditarAtividade(atividade)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoverAtividade(atividade.Id)">Remover</button>
                        }
                    </div>
                </li>
            }
        </ul>
    }
    @if (cargo == "Organizador")
    {
        <h5>@(editandoAtividade ? "Editar Atividade" : "Adicionar Nova Atividade")</h5>
        <div class="card p-3 mb-4">
            <div class="mb-3">
                <label class="form-label">Nome</label>
                <input type="text" class="form-control" @bind="novaAtividade.Nome"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Descrição</label>
                <textarea class="form-control" @bind="novaAtividade.Descricao"></textarea>
            </div>
            <div class="mb-3">
                <label class="form-label">Data</label>
                <input type="date" class="form-control" value="@dataString" @onchange="OnDataChanged"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Hora</label>
                <input type="time" class="form-control" value="@horaString" @onchange="OnHoraChanged"/>
            </div>
            <button type="button" class="btn btn-success" @onclick="SalvarAtividade" @onclick:preventDefault>
                @(editandoAtividade ? "Atualizar Atividade" : "Salvar Atividade")
            </button>
            @if (editandoAtividade)
            {
                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarEdicao">Cancelar</button>
            }
        </div>
        
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private Evento? evento;
    private List<Atividade> atividades = new();
    private Atividade novaAtividade = new();
    private string dataString = string.Empty;
    private string horaString = string.Empty;
    private bool editandoAtividade = false;
    private int? atividadeIdEditando = null;
    private string cargo;

    protected override async Task OnInitializedAsync()
    {
        await CarregarEvento();
        
        cargo = _userSessionService.GetUsuario().TipoUsuario;
    }

    private async Task CarregarEvento()
    {
        if (evento != null)
        {
            Db.Entry(evento).State = EntityState.Detached;
        }

        evento = await Db.Eventos
            .AsNoTracking()
            .Include(e => e.EventoAtividades)
            .ThenInclude(ea => ea.Atividade)
            .FirstOrDefaultAsync(e => e.Id == id);

        if (evento != null)
        {
            atividades = evento.EventoAtividades
                .Select(ea => ea.Atividade)
                .OrderBy(a => a.Data)
                .ThenBy(a => a.Hora)
                .ToList();
        }

        StateHasChanged();
    }

    private void EditarAtividade(Atividade atividade)
    {
        editandoAtividade = true;
        atividadeIdEditando = atividade.Id;
        novaAtividade = new Atividade
        {
            Id = atividade.Id,
            Nome = atividade.Nome,
            Descricao = atividade.Descricao,
            Data = atividade.Data,
            Hora = atividade.Hora,
            EventoAtividades = new List<Evento_Atividade>
            {
                new Evento_Atividade { IdEvento = id }
            }
        };
        dataString = atividade.Data.ToString("yyyy-MM-dd");
        horaString = atividade.Hora.ToString(@"hh\:mm");
        StateHasChanged();
    }

    private void CancelarEdicao()
    {
        editandoAtividade = false;
        atividadeIdEditando = null;
        novaAtividade = new();
        dataString = string.Empty;
        horaString = string.Empty;
        StateHasChanged();
    }

    private async Task SalvarAtividade()
    {
        Console.WriteLine("Iniciando SalvarAtividade");

        try
        {
            if (DateTime.TryParse(dataString, out var data))
            {
                novaAtividade.Data = data;
                Console.WriteLine($"Data válida: {data}");
            }
            else
            {
                Console.WriteLine("Data inválida");
                return;
            }

            if (TimeSpan.TryParse(horaString, out var hora))
            {
                novaAtividade.Hora = hora;
                Console.WriteLine($"Hora válida: {hora}");
            }
            else
            {
                Console.WriteLine("Hora inválida");
                return;
            }

            novaAtividade.EventoAtividades = new List<Evento_Atividade>
            {
                new Evento_Atividade
                {
                    IdEvento = id,
                    Evento = null,
                    Atividade = null
                }
            };

            Console.WriteLine("JSON a enviar:");
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(novaAtividade));

            HttpResponseMessage response;

            if (editandoAtividade && atividadeIdEditando.HasValue)
            {
                novaAtividade.Id = atividadeIdEditando.Value;
                response = await Http.PutAsJsonAsync($"api/atividade/{atividadeIdEditando.Value}", novaAtividade);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/atividade", novaAtividade);
            }

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine(editandoAtividade ? "Atividade atualizada com sucesso." : "Atividade criada com sucesso.");
                await CarregarEvento();
                CancelarEdicao();
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro HTTP ({(int)response.StatusCode}): {erro}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro inesperado: {ex.Message}");
        }
    }

    private async Task RemoverAtividade(int atividadeId)
    {
        var response = await Http.DeleteAsync($"api/atividade/{atividadeId}");
        if (response.IsSuccessStatusCode)
        {
            await CarregarEvento();
        }
        else
        {
            var erro = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Erro ao remover atividade: {erro}");
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/Eventos");
    }

    private void OnDataChanged(ChangeEventArgs e)
    {
        dataString = e.Value?.ToString() ?? string.Empty;
        if (DateTime.TryParse(dataString, out var data))
        {
            novaAtividade.Data = data;
        }
    }

    private void OnHoraChanged(ChangeEventArgs e)
    {
        horaString = e.Value?.ToString() ?? string.Empty;
        if (TimeSpan.TryParse(horaString, out var hora))
        {
            novaAtividade.Hora = hora;
        }
    }
}