@page "/Eventos"
@using ES2Real.Components.Layout
@inject UserSessionService userSessionService
@inject NavigationManager NavigationManager



<BackButton />

@rendermode InteractiveServer
@inject HttpClient Http

<div class="container mt-5">
    <h2 class="text-center">Gerir Eventos</h2>

    <div class="mt-4">
        <button class="btn btn-success" @onclick="ToggleCriarEvento">
            @(mostrarFormulario ? "Cancelar" : "Criar Novo Evento")
        </button>
    </div>

    @if (mostrarFormulario)
    {
        <div class="card p-4 mt-4">
            <h4>@(modoEdicao ? "Editar Evento" : "Criar Novo Evento")</h4>

            <div class="mb-3">
                <label class="form-label">Nome do Evento</label>
                <input type="text" class="form-control" @bind="eventoEditado.Nome" />
            </div>

            <div class="mb-3">
                <label class="form-label">Categoria</label>
                <input type="text" class="form-control" @bind="eventoEditado.Categoria" />
            </div>

            <div class="mb-3">
                <label class="form-label">Data</label>
                <input type="date" class="form-control" value="@dataString" @onchange="OnDataChanged" />
            </div>

            <div class="mb-3">
                <label class="form-label">Hora</label>
                <input type="time" class="form-control" value="@horaString" @onchange="OnHoraChanged" />
            </div>

            <div class="mb-3">
                <label class="form-label">Local</label>
                <input type="text" class="form-control" @bind="eventoEditado.Local" />
            </div>

            <div class="mb-3">
                <label class="form-label">Descrição</label>
                <textarea class="form-control" @bind="eventoEditado.Descricao"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Capacidade Máxima</label>
                <input type="number" class="form-control" @bind="eventoEditado.CapacidadeMax" />
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-secondary me-2" @onclick="ToggleCriarEvento">Cancelar</button>
                <button class="btn btn-primary" @onclick="SalvarEvento">Salvar Evento</button>
            </div>
        </div>
    }

    <div class="mt-4">
        <table class="table">
            <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Hora</th>
                <th>Local</th>
                <th>Ações</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var evento in eventos)
            {
                <tr>
                    <td>@evento.Nome</td>
                    <td>@evento.Data.ToString("dd/MM/yyyy")</td>
                    <td>@evento.Hora.ToString(@"hh\:mm")</td>
                    <td>@evento.Local</td>
                    <td>
                        <button class="btn btn-primary me-2" @onclick="() => EditarEvento(evento)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => RemoverEvento(evento.Id)">Remover</button>
                        <button class="btn btn-secondary" @onclick="() => GerirAtividades(evento.Id)">Atividades</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Evento> eventos = new();
    private bool mostrarFormulario = false;
    private bool modoEdicao = false;
    private Evento eventoEditado = new();

    // Use string properties for date and time inputs
    private string dataString = string.Empty;
    private string horaString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CarregarEventos();
    }

    private async Task CarregarEventos()
    {
        try
        {
            eventos = await Http.GetFromJsonAsync<List<Evento>>("api/evento") ?? new List<Evento>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar eventos: {ex.Message}");
            eventos = new List<Evento>();
        }
    }

    private void ToggleCriarEvento()
    {
        mostrarFormulario = !mostrarFormulario;
        if (!mostrarFormulario)
        {
            eventoEditado = new Evento();
            modoEdicao = false;
            dataString = string.Empty;
            horaString = string.Empty;
        }
    }

    private void EditarEvento(Evento evento)
    {
        eventoEditado = new Evento
        {
            Id = evento.Id,
            Nome = evento.Nome,
            Categoria = evento.Categoria,
            Data = evento.Data,
            Local = evento.Local,
            Descricao = evento.Descricao,
            CapacidadeMax = evento.CapacidadeMax,
            Hora = evento.Hora
        };

        // Format the date and time as strings for the inputs
        dataString = evento.Data.ToString("yyyy-MM-dd");
        horaString = evento.Hora.ToString(@"hh\:mm");

        modoEdicao = true;
        mostrarFormulario = true;
    }

    // Handle date input changes
    private void OnDataChanged(ChangeEventArgs e)
    {
        dataString = e.Value?.ToString() ?? string.Empty;
        if (DateTime.TryParse(dataString, out var data))
        {
            eventoEditado.Data = data;
        }
    }

    // Handle time input changes
    private void OnHoraChanged(ChangeEventArgs e)
    {
        horaString = e.Value?.ToString() ?? string.Empty;
        if (TimeSpan.TryParse(horaString, out var hora))
        {
            eventoEditado.Hora = hora;
        }
    }

    public async Task SalvarEvento()
    {
        try
        {
            var usuarioLogado = userSessionService.GetUsuario(); // Obtém o usuário logado

            if (usuarioLogado != null)
            {
                eventoEditado.IdOrganizador = usuarioLogado.Id; // Associa o organizador ao evento
            }

            eventoEditado.Data = DateTime.SpecifyKind(eventoEditado.Data, DateTimeKind.Utc);
            HttpResponseMessage response;

            if (modoEdicao)
            {
                response = await Http.PutAsJsonAsync($"api/evento/{eventoEditado.Id}", eventoEditado);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/evento", eventoEditado);
            }

            if (response.IsSuccessStatusCode)
            {
                await CarregarEventos();
                ToggleCriarEvento();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar evento: {ex.Message}");
        }
    }


    private async Task RemoverEvento(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/evento/{id}");
            if (response.IsSuccessStatusCode)
            {
                await CarregarEventos();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover evento: {ex.Message}");
        }
    }

    private class Evento
    {
        public int Id { get; set; }
        public string Nome { get; set; } = string.Empty;
        public string Categoria { get; set; } = string.Empty;
        public DateTime Data { get; set; } = DateTime.Today;
        public TimeSpan Hora { get; set; }
        public string Local { get; set; } = string.Empty;
        public string Descricao { get; set; } = string.Empty;
        public int CapacidadeMax { get; set; }
        public int IdOrganizador { get; set; }
    }

    private void GerirAtividades(int eventoId)
    {
        NavigationManager.NavigateTo($"/EventoAtividades/{eventoId}");
    }

    
}
