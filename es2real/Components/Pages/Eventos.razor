@page "/Eventos"

@using ES2Real.Components.Layout

<h3></h3>

<BackButton />

@rendermode InteractiveServer
@inject HttpClient Http

<div class="container mt-5">
    <h2 class="text-center">Gerir Eventos</h2>

    <div class="mt-4">
        <button class="btn btn-success" @onclick="ToggleCriarEvento">
            @(mostrarFormulario ? "Cancelar" : "Criar Novo Evento")
        </button>
    </div>

    @if (mostrarFormulario)
    {
        <div class="card p-4 mt-4">
            <h4>Criar Novo Evento</h4>

            <div class="mb-3">
                <label class="form-label">Nome do Evento</label>
                <input type="text" class="form-control" @bind="novoEvento.Nome" />
            </div>

            <div class="mb-3">
                <label class="form-label">Data</label>
                <input type="date" class="form-control" @bind="novoEvento.Data" min="2025-01-01" />
            </div>

            <div class="mb-3">
                <label class="form-label">Local</label>
                <input type="text" class="form-control" @bind="novoEvento.Local" />
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-secondary me-2" @onclick="ToggleCriarEvento">Cancelar</button>
                <button class="btn btn-primary" @onclick="CriarEvento">Criar Evento</button>
            </div>
        </div>
    }

    <div class="mt-4">
        <table class="table">
            <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Local</th>
                <th>Ações</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var evento in eventos)
            {
                <tr>
                    <td>@evento.Nome</td>
                    <td>@evento.Data.ToString("dd/MM/yyyy")</td>
                    <td>@evento.Local</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoverEvento(evento.Id)">Remover</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Evento> eventos = new();
    private Evento novoEvento = new() { Data = new DateTime(2025, 1, 1) }; // 🔹 Data padrão em 2025
    private bool mostrarFormulario = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarEventos();
    }

    private async Task CarregarEventos()
    {
        try
        {
            eventos = await Http.GetFromJsonAsync<List<Evento>>("api/evento");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar eventos: {ex.Message}");
        }
    }

    private void ToggleCriarEvento()
    {
        mostrarFormulario = !mostrarFormulario;
        if (!mostrarFormulario)
        {
            novoEvento = new() { Data = new DateTime(2025, 1, 1) }; // 🔹 Reseta a data para 2025
        }
    }

    private async Task CriarEvento()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/evento", novoEvento);
            if (response.IsSuccessStatusCode)
            {
                await CarregarEventos();
                ToggleCriarEvento();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao criar evento: {ex.Message}");
        }
    }

    private async Task RemoverEvento(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/evento/{id}");
            if (response.IsSuccessStatusCode)
            {
                await CarregarEventos();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover evento: {ex.Message}");
        }
    }

    private class Evento
    {
        public int Id { get; set; }
        public string Nome { get; set; } = string.Empty;
        public DateTime Data { get; set; }
        public string Local { get; set; } = string.Empty;
    }
}
