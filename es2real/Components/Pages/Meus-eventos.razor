@page "/Meus-eventos"

@using ES2Real.Components.Layout
@rendermode InteractiveServer
@inject HttpClient Http

<h3>Meus Eventos</h3>

<BackButton />

<div class="mb-3 d-flex gap-2 flex-wrap">
    <input class="form-control" placeholder="Filtrar por Categoria" @bind="FiltroCategoria" @bind:event="oninput" />
    <input class="form-control" placeholder="Filtrar por Local" @bind="FiltroLocal" @bind:event="oninput" />
    <input class="form-control" type="date" @bind="FiltroData" />
</div>

<div class="mt-4">
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Local</th>
                <th>Categoria</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in eventosFiltrados)
            {
                <tr>
                    <td>@evento.Nome</td>
                    <td>@evento.Data.ToString("dd/MM/yyyy")</td>
                    <td>@evento.Local</td>
                    <td>@evento.Categoria</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoverEvento(evento.Id)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Evento> eventos = new();
    private List<Evento> eventosFiltrados = new();

    private string filtroCategoria = string.Empty;
    private string filtroLocal = string.Empty;
    private DateTime? filtroData = null;

    protected override async Task OnInitializedAsync()
    {
        await CarregarEventos();
    }

    private async Task CarregarEventos()
    {
        try
        {
            eventos = await Http.GetFromJsonAsync<List<Evento>>("api/BilheteParticipante");
            FiltrarEventos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar eventos: {ex.Message}");
        }
    }

    private void FiltrarEventos()
    {
        eventosFiltrados = eventos
            .Where(e =>
                (string.IsNullOrWhiteSpace(filtroCategoria) || e.Categoria.Contains(filtroCategoria, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filtroLocal) || e.Local.Contains(filtroLocal, StringComparison.OrdinalIgnoreCase)) &&
                (!filtroData.HasValue || e.Data.Date == filtroData.Value.Date)
            )
            .ToList();
    }

    private async Task RemoverEvento(int id)
    {
        var eventoRemover = eventos.FirstOrDefault(e => e.Id == id);
        if (eventoRemover != null)
        {
            eventos.Remove(eventoRemover);
            FiltrarEventos();
        }
    }

    private string FiltroCategoria
    {
        get => filtroCategoria;
        set
        {
            filtroCategoria = value;
            FiltrarEventos();
        }
    }

    private string FiltroLocal
    {
        get => filtroLocal;
        set
        {
            filtroLocal = value;
            FiltrarEventos();
        }
    }

    private DateTime? FiltroData
    {
        get => filtroData;
        set
        {
            filtroData = value;
            FiltrarEventos();
        }
    }
}
