@page "/registar"
@using System.ComponentModel.DataAnnotations
@inject UsuarioService _usuarioService

<h3>Register</h3>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

<div class="container">
    <EditForm Model="@userModel" OnValidSubmit="RegisterUser" FormName="Register">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Username:</label>
            <InputText @bind-Value="userModel.Username" required />
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="userModel.Email" required />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText type="password" @bind-Value="userModel.Password" required />
        </div>
    
        <button type="submit">Register</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private UserRegistrationModel userModel { get; set; } = new();
    private string message = string.Empty;

    private async Task RegisterUser()
    {
        Console.WriteLine("RegisterUser method called.");
        Console.WriteLine($"Username: {userModel.Username}");
        Console.WriteLine($"Email: {userModel.Email}");
        Console.WriteLine($"Password: {userModel.Password}");
        
        try
        {
            var user = await _usuarioService.RegisterUserAsync(
                userModel.Username, userModel.Email, userModel.Password);

            message = user != null ? "Registration successful!" : "Error registering user.";
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    public class UserRegistrationModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}