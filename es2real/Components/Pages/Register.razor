@page "/registar"
@using System.ComponentModel.DataAnnotations
@inject UsuarioService _usuarioService

<h3>Register</h3>

<EditForm Model="@userModel" OnSubmit="RegisterUser" FormName="registerForm1">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="userModel.Username" />
    </div>

    <div>
        <label>Email:</label>
        <InputText @bind-Value="userModel.Email" />
    </div>

    <div>
        <label>Password:</label>
        <InputText type="password" @bind-Value="userModel.Password" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@if (message is not null)
{
    <p>@message</p>
}


@code {


        // private UserRegistrationModel userModel = new();
        private UserRegistrationModel userModel = new UserRegistrationModel();
        private string message;

        private async Task RegisterUser()
        {
            Console.WriteLine("RegisterUser method called");
            try
            {
                StateHasChanged();
                Console.WriteLine($"Username: {userModel.Username}");
                Console.WriteLine($"Email: {userModel.Email}");
                Console.WriteLine($"Password: {userModel.Password}");
                Console.WriteLine(userModel.Password);
                Console.WriteLine("checkpoint 2");

                var user = await _usuarioService.RegisterUserAsync(
                    userModel.Username, userModel.Email, userModel.Password);

                if (user != null)
                {
                    message = "Registration successful!";
                }
                else
                {
                    message = "Error registering user.";
                }
            }
            catch (Exception ex)
            {
                message = $"An error occurred: {ex.Message}";
            }
        }

        public class UserRegistrationModel
        {
            // [Required(ErrorMessage = "Username is required")]
            public string Username { get; set; } = string.Empty;

            // [Required(ErrorMessage = "Email is required")]
            // [EmailAddress(ErrorMessage = "Invalid email address")]
            public string Email { get; set; } = string.Empty;

            // [Required(ErrorMessage = "Password is required")]
            // [MinLength(2, ErrorMessage = "Password must be at least 2 characters")]
            public string Password { get; set; } = string.Empty;
        }
    }

