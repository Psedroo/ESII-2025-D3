@page "/Participantes"
@using ES2Real.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@using ES2Real.Components.Layout
@inject HttpClient Http
@inject UserSessionService _userSessionService
@rendermode InteractiveServer
@inject IJSRuntime JS


<BackButton />

<div class="min-h-screen flex justify-center items-start py-8">
    <div class="w-full max-w-4xl text-center">
        <h3 class="text-2xl font-bold mb-6">Participantes Inscritos em Eventos</h3>

        @if (inscricoes == null)
        {
            <p>Carregando...</p>
        }
        else if (!inscricoes.Any())
        {
            <p>Nenhum participante inscrito encontrado.</p>
        }
        else
        {
            <table class="table-auto mx-auto border border-gray-300 text-center">
                <thead>
                    <tr>
                        <th class="px-4 py-2">Nome</th>
                        <th class="px-4 py-2">Email</th>
                        <th class="px-4 py-2">Evento</th>
                        <th class="px-4 py-2">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var i in inscricoes)
                    {
                        <tr>
                            <td class="px-4 py-2">@i.Nome</td>
                            <td class="px-4 py-2">@i.Email</td>
                            <td class="px-4 py-2">@i.Evento</td>
                            <td class="px-4 py-2">
                                <button @onclick="() => ConfirmarRemocao(i.IdBilhete)"
                                        style="background-color: #e33636; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); font-weight: bold; cursor: pointer; border: none;">
                                    Remover
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<InscricaoViewModel>? inscricoes;
    
    private async Task ConfirmarRemocao(int idBilhete)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", "Tens a certeza que queres remover este participante?");
        if (confirmado)
        {
            await RemoverParticipante(idBilhete);
        }
    }


    private class InscricaoViewModel
    {
        public int ParticipanteId { get; set; }
        public int IdBilhete { get; set; }  // Necessário para remover
        public string Nome { get; set; } = "";
        public string Email { get; set; } = "";
        public string Evento { get; set; } = "";
        public int EventoId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await CarregarParticipantes();
    }

    private async Task CarregarParticipantes()
    {
        inscricoes = await Http.GetFromJsonAsync<List<InscricaoViewModel>>(
            "https://localhost:44343/api/participante/inscritos-com-eventos"
        );
    }

    private async Task RemoverParticipante(int idBilhete)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/BilheteParticipante/remover/{idBilhete}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Participante removido com sucesso!");
                await CarregarParticipantes(); // Atualiza a lista
            }
            else
            {
                Console.WriteLine($"Erro ao remover participante: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}
