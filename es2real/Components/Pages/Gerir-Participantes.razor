@page "/Participantes"
@inject HttpClient Http
@inject UserSessionService UserSessionService
@inject utilizadorService UtilizadorService

@using ES2Real.Models
@using ES2Real.Components.Layout

<BackButton />

<div class="flex justify-center">
    <div class="w-full max-w-4xl px-4 mx-auto">

        <h3 class="text-xl font-bold mb-4 text-center">Participantes Inscritos em Eventos</h3>

        @if (inscricoes == null)
        {
            <p class="text-center">Carregando...</p>
        }
        else if (!inscricoes.Any())
        {
            <p class="text-center">Nenhum participante inscrito encontrado.</p>
        }
        else
        {
            <table class="table-auto w-full border border-gray-300 text-center">
                <thead>
                    <tr>
                        <th class="px-4 py-2">Nome</th>
                        <th class="px-4 py-2">Email</th>
                        <th class="px-4 py-2">Evento</th>
                        <th class="px-4 py-2">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var i in inscricoes)
                    {
                        <tr>
                            <td class="px-4 py-2">@i.Nome</td>
                            <td class="px-4 py-2">@i.Email</td>
                            <td class="px-4 py-2">@i.Evento</td>
                            <td class="px-4 py-2">
                                <button @onclick="() => RemoverInscricao(i.ParticipanteId)"
                                        style="background-color: #e33636; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); font-weight: bold; cursor: pointer; border: none;">
                                    Remover
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@code {
    private List<InscricaoViewModel>? inscricoes;

    private class InscricaoViewModel
    {
        public int ParticipanteId { get; set; }
        public string Nome { get; set; } = "";
        public string Email { get; set; } = "";
        public string Evento { get; set; } = "";
        public int EventoId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        inscricoes = await Http.GetFromJsonAsync<List<InscricaoViewModel>>(
            "https://localhost:44343/api/participante/inscritos-com-eventos"
        );
    }

    private async Task RemoverInscricao(int participanteId)
    {
        var response = await Http.DeleteAsync(
            $"https://localhost:44343/api/bilheteparticipante/cancelar/{participanteId}");

        if (response.IsSuccessStatusCode)
        {
            inscricoes = inscricoes?.Where(i => i.ParticipanteId != participanteId).ToList();
            StateHasChanged();
        }
    }
}
