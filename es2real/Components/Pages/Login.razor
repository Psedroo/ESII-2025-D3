@page "/login"
@using System.Net.Http.Json
@using System.Text.Json
@using ES2Real.Data
@inject HttpClient Http
@inject UsuarioService usuarioService
@inject NavigationManager Navigation
@inject UserSessionService AuthStateProvider


<h3>Login</h3>

@if (!string.IsNullOrEmpty(loginMessage))
{
    <p class="alert alert-success">@((MarkupString)loginMessage)</p>
}

<div class="container">
    <EditForm Model="userModel" OnValidSubmit="HandleLogin" FormName="Login">
        <DataAnnotationsValidator/>
        
        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="userModel.Email" required/>
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText type="password" @bind-Value="userModel.Password" required/>
        </div>

        <button type="submit">Iniciar sessão</button>
    </EditForm>
</div>

<a href="/registar" class="btn btn-primary">Registar</a>

@code { 
    [SupplyParameterFromForm]
    private UserLoginModel userModel { get; set; } = new();
    
    private string loginMessage = string.Empty;

    private async Task HandleLogin()
    {
        var usuario = await usuarioService.AuthenticateUserAsync(userModel.Email, userModel.Password);
        if (usuario != null)
        {
            AuthStateProvider.SetUsuario(usuario); // Store user in session service

            if (usuario.TipoUsuario == "Organizador")
                Navigation.NavigateTo("/organizador");
            else if (usuario.TipoUsuario == "Participante")
                Navigation.NavigateTo("/participante");
        }
        else
        {
            loginMessage = "<strong style='color:red;'>Login failed! Invalid email or password.</strong>";
            StateHasChanged();
        }
    }

    public class UserLoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}