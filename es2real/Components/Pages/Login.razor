@page "/login"

@using ES2Real.Components.Layout
@using ES2Real.Interfaces;
@inject utilizadorService utilizadorService

<h3></h3>

@inject NavigationManager Navigation
@inject UserSessionService AuthStateProvider

<link rel="stylesheet" href="css/login.css" asp-append-version="true" />

@if (!string.IsNullOrEmpty(loginMessage))
{
    <p class="alert alert-success">@((MarkupString)loginMessage)</p>
}

<section class="vh-80 gradient-custom">
    <div class="container  h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card bg-dark text-white" style="border-radius: 1rem;">
                    <div class="card-body p-5 text-center">

                        <div class="mb-md-5 mt-md-4">
                            <EditForm Model="userModel" OnValidSubmit="HandleLogin" FormName="Login">
                                <DataAnnotationsValidator />
                                
                                <h2 class="fw-bold mb-2 text-uppercase">Entrar</h2>
                                <p class="text-white-50 mb-5">Por favor insira o seu e-mail e palavra-passe.</p>

                                <div data-mdb-input-init class="form-outline form-white mb-4">
                                    <InputText type="email" id="typeEmailX" class="form-control form-control-lg" @bind-Value="userModel.Email" required />
                                    <label class="form-label" for="typeEmailX">Email</label>
                                </div>

                                <div data-mdb-input-init class="form-outline form-white mb-4">
                                    <InputText type="password" id="typePasswordX" class="form-control form-control-lg" @bind-Value="userModel.Password" required />
                                    <label class="form-label" for="typePasswordX">Palavra-passe</label>
                                </div>


                                <button data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-light btn-lg px-5" type="submit">Entrar</button>
                            </EditForm>

                            <div class="d-flex justify-content-center text-center">
                                <a href="#!" class="text-white"><i class="fab fa-facebook-f fa-lg"></i></a>
                                <a href="#!" class="text-white"><i class="fab fa-twitter fa-lg mx-4 px-2"></i></a>
                                <a href="#!" class="text-white"><i class="fab fa-google fa-lg"></i></a>
                            </div>

                        </div>

                        <div>
                            <p class="mb-0">Não tem conta? <a href="/registar" class="text-white-50 fw-bold">Registar</a>
                            </p>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [SupplyParameterFromForm]
    private UserLoginModel userModel { get; set; } = new();
    private string loginMessage = string.Empty;
    
    protected override void OnInitialized()
    {
       AuthStateProvider.Logout();
    }
    
    // Método de Login
    private async Task HandleLogin()
    {
        var user = await utilizadorService.AuthenticateUserAsync(userModel.Email, userModel.Password);
        
        if (user != null)
        {
            AuthStateProvider.SetUsuario(user);  // Store user in session service

            if (user.TipoUsuario == "Organizador")
                Navigation.NavigateTo("/organizador");
            else if (user.TipoUsuario == "Participante")
                Navigation.NavigateTo($"/participante/{user.Id}");  // Pass user ID to the Participante page
        }
        else
        {
            loginMessage = "<strong style='color:red;'>Falha no login! Email ou palavra-passe inválidos.</strong>";
            StateHasChanged();  // Updates UI to show the error message
        }
    }

    public class UserLoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
