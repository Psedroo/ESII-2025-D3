@page "/Inscricoes/{id:int}"
@using ES2Real.Components.Layout
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject ApplicationDbContext Db

<h3>Eventos Disponíveis</h3>

<BackButton />

@rendermode InteractiveServer

<PageTitle>Inscricoes</PageTitle>

<div class="search-bar">
    <input @bind="filtro" @bind:event="oninput" placeholder="Procurar por nome..." class="form-control me-2" />
    <input @bind="filtroCategoria" @bind:event="oninput" placeholder="Categoria..." class="form-control me-2" />
    <input @bind="filtroLocal" @bind:event="oninput" placeholder="Local..." class="form-control me-2" />
    <input type="date" @bind="filtroData" class="form-control me-2" />
    <button><span class="lupa">&#128269;</span></button>
</div>

@if (eventosFiltrados is null)
{
    <p>Carregando eventos...</p>
}
else if (!eventosFiltrados.Any())
{
    <p>Nenhum evento encontrado.</p>
}
else
{
    <div class="eventos-container">
        @foreach (var evento in eventosFiltrados)
        {
            <div class="evento-card">
                <h4>@evento.Nome</h4>
                <p><strong>Categoria:</strong> @evento.Categoria</p>
                <p><strong>Data:</strong> @evento.Data.ToString("dd/MM/yyyy")</p>
                <p><strong>Hora:</strong> @evento.Hora</p>
                <p><strong>Local:</strong> @evento.Local</p>
                <button class="btn btn-info" @onclick="() => ComprarBilhete(evento.Id)">Comprar Bilhete</button>
                <button class="btn btn-primary" @onclick="() => IrParaDetalhes(evento.Id)">Ver Detalhes</button>
            </div>
        }
    </div>
}

@if (mostrarBilhetes)
{
    <div class="modal-bilhete">
        <h4>Escolher Bilhete</h4>
        <select @bind="bilheteSelecionadoId">
            <option value="">-- Seleciona um bilhete --</option>
            @foreach (var b in bilhetesDisponiveis)
            {
                <option value="@b.Id">@b.Tipo - @b.Descricao (@b.Quantidade disponíveis)</option>
            }
        </select>
        <button class="btn btn-success" @onclick="ConfirmarCompra" disabled="@(!PodeConfirmar)">Comprar</button>
        <button class="btn btn-secondary" @onclick="() => mostrarBilhetes = false">Cancelar</button>
    </div>
}

<style>
    .search-bar {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .search-bar input {
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-width: 250px;
    }

    .search-bar button {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .eventos-container {
        display: flex;
        gap: 1rem;
        overflow-x: auto;
        padding-bottom: 1rem;
        flex-wrap: wrap;
    }

    .evento-card {
        min-width: 250px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 12px;
        padding: 1rem;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
        flex-shrink: 0;
    }

    .evento-card h4 {
        margin-top: 0;
        margin-bottom: 0.5rem;
    }

    .modal-bilhete {
        background: white;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 12px;
        box-shadow: 0px 0px 10px rgba(0,0,0,0.2);
        position: fixed;
        top: 20%;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
    }
</style>

@code {
    [Parameter]
    public int id { get; set; }

    private bool mostrarBilhetes = false;
    private int eventoSelecionadoId;
    private List<Bilhete> bilhetesDisponiveis = new();
    private int bilheteSelecionadoId;

    private bool PodeConfirmar => bilheteSelecionadoId > 0;

    private List<Evento>? eventos;

    private string filtro = "";
    private string filtroCategoria = "";
    private string filtroLocal = "";
    private DateTime? filtroData = null;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private IEnumerable<Evento> eventosFiltrados =>
        eventos?
            .Where(e =>
                (string.IsNullOrWhiteSpace(filtro) || e.Nome.Contains(filtro, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filtroCategoria) || e.Categoria.Contains(filtroCategoria, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filtroLocal) || e.Local.Contains(filtroLocal, StringComparison.OrdinalIgnoreCase)) &&
                (!filtroData.HasValue || e.Data.Date == filtroData.Value.Date)
            ) ?? new List<Evento>();

    protected override async Task OnInitializedAsync()
    {
        eventos = await Db.Eventos
            .OrderBy(e => e.Data)
            .ToListAsync();
    }

    private async Task ComprarBilhete(int eventoId)
    {
        eventoSelecionadoId = eventoId;
        bilhetesDisponiveis = await Db.Bilhetes
            .Where(b => b.idEvento == eventoId && b.Quantidade > 0)
            .ToListAsync();

        mostrarBilhetes = true;
    }

    private async Task ConfirmarCompra()
    {
        var novoRegisto = new Bilhete_Participante
        {
            IdParticipante = id,
            IdBilhete = bilheteSelecionadoId
        };

        Db.Add(novoRegisto);

        var bilhete = await Db.Bilhetes.FindAsync(bilheteSelecionadoId);
        if (bilhete != null)
        {
            bilhete.Quantidade--;
        }

        await Db.SaveChangesAsync();

        mostrarBilhetes = false;
    }
    
    private void IrParaDetalhes(int eventoId)
    {
        Navigation.NavigateTo($"/EventoAtividades/{eventoId}");
    }
}
