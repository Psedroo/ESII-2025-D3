@page "/relatorios"
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Json
@using ES2Real.Models
@inject ApplicationDbContext _context
@inject HttpClient Http

<h3>Relatórios</h3>

<h4>Relatório Geral de Eventos</h4>
@if (generalReport == null)
{
    <p>Carregando relatório geral...</p>
}
else
{
    <div class="relatorio-geral mb-4">
        <h5>Eventos por Categoria</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Categoria</th>
                    <th>Número de Eventos</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoria in generalReport.EventosPorCategoria)
                {
                    <tr>
                        <td>@categoria.Key</td>
                        <td>@categoria.Value</td>
                    </tr>
                }
            </tbody>
        </table>

        <h5>Eventos Mais Populares</h5>
        @if (string.IsNullOrEmpty(generalReport.MaisPopul))
        {
            <p>Nenhum evento com participantes encontrado.</p>
        }
        else
        {
            <p>@generalReport.MaisPopul</p>
        }

        <h5>Total de Participantes</h5>
        <p>@generalReport.TotalPart participantes em todos os eventos.</p>

        <button class="btn btn-success mb-3" @onclick="SalvarRelatorioGeral">Salvar Relatório Geral</button>
    </div>
}

<h4>Criar Relatório Específico</h4>
@if (eventosSemRelatorio == null)
{
    <p>A carregar eventos...</p>
}
else if (!eventosSemRelatorio.Any())
{
    <p>Todos os eventos já têm relatórios.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome do Evento</th>
                <th>Data</th>
                <th>Local</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in eventosSemRelatorio)
            {
                <tr>
                    <td>@evento.Nome</td>
                    <td>@evento.Data.ToShortDateString()</td>
                    <td>@evento.Local</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => CriarRelatorio(evento.Id)">Criar Relatório</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Evento> eventosSemRelatorio;
    private GeneralReportResponse generalReport;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CarregarEventosSemRelatorio();
            await CarregarRelatorioGeral();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao inicializar relatórios: {ex.Message}");
        }
    }

    private async Task CarregarEventosSemRelatorio()
    {
        try
        {
            eventosSemRelatorio = await _context.Eventos
                .Where(e => !e.EventoRelatoriosEspecificos.Any())
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar eventos sem relatório: {ex.Message}");
            eventosSemRelatorio = new List<Evento>();
        }
    }

    private async Task CarregarRelatorioGeral()
    {
        try
        {
            generalReport = await Http.GetFromJsonAsync<GeneralReportResponse>("api/relatorio/geral");
            if (generalReport == null)
            {
                generalReport = new GeneralReportResponse();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar relatório geral: {ex.Message}");
            generalReport = new GeneralReportResponse();
        }
    }

    private async Task CriarRelatorio(int eventoId)
    {
        try
        {
            var evento = await _context.Eventos
                .FirstOrDefaultAsync(e => e.Id == eventoId);

            if (evento == null) return;

            var bilhetes = await _context.Bilhetes
                .Include(b => b.BilheteParticipante)
                .Where(b => b.idEvento == eventoId)
                .ToListAsync();
            int numParticipantes = bilhetes
                .SelectMany(b => b.BilheteParticipante)
                .DistinctBy(bp => bp.IdParticipante)
                .Count();
            decimal receitaTotal = bilhetes.Sum(b => b.Preco * b.Quantidade);

            var relatorioEspecifico = new RelatorioEspecifico
            {
                NumParticipantesAtiv = numParticipantes,
                Receita = receitaTotal,
                Feedback = "",
                IdRelatorio = 0 // No Relatorio entity
            };

            relatorioEspecifico.EventoRelatoriosEspecificos.Add(new Evento_RelatorioEspecifico
            {
                IdEvento = eventoId,
                RelatorioEspecifico = relatorioEspecifico
            });

            _context.RelatoriosEspecificos.Add(relatorioEspecifico);
            await _context.SaveChangesAsync();
            await CarregarEventosSemRelatorio();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao criar relatório específico: {ex.Message}");
        }
    }

    private async Task SalvarRelatorioGeral()
    {
        try
        {
            var response = await Http.PostAsync("api/relatorio/geral", null);
            if (response.IsSuccessStatusCode)
            {
                await CarregarRelatorioGeral();
            }
            else
            {
                Console.WriteLine($"Erro ao salvar relatório geral: {(int)response.StatusCode} {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar relatório geral: {ex.Message}");
        }
    }

    private class GeneralReportResponse
    {
        public Dictionary<string, int> EventosPorCategoria { get; set; } = new();
        public string MaisPopul { get; set; } = string.Empty;
        public int TotalPart { get; set; }
    }
}